#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist

def square():

    # Start a new node
    rospy.init_node('square_mover', anonymous=True)
    vel_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
    vel_msg = Twist()

    # Define initial velocity parameters
    vel_msg.linear.x = 0.0
    vel_msg.linear.y = 0.0
    vel_msg.linear.z = 0.0
    vel_msg.angular.x = 0.0
    vel_msg.angular.y = 0.0
    vel_msg.angular.z = 0.5

    # Define constant distance to achieve
    forwardDistance = 5.0
    turningDistance = 1.0

    while not rospy.is_shutdown():

        # Set time and initial distance for final distance calculation
        t0 = rospy.Time.now().to_sec()
        current_distance = 0

        # Loop for Turtlebot to turn
        while (current_distance < turningDistance):
            vel_pub.publish(vel_msg)
            t1 = rospy.Time.now().to_sec()
            current_distance = vel_msg.angular.z * (t1 - t0)

        # Switch from turning to forward
        vel_msg.angular.z = 0.0
        vel_pub.publish(vel_msg)
        current_distance = 0
        vel_msg.linear.x = 1.0
        t0 = rospy.Time.now().to_sec()

        # Loop for Turtlebot to move forward
        while (current_distance < forwardDistance):
            vel_pub.publish(vel_msg)
            t1 = rospy.Time().to_move()
            current_distance = vel_msg.linear.x * (t1- t0)
            
        # Switch back from forward to turning
        vel_msg.linear.x = 0.0
        vel_pub.publish(vel_msg)
        current_distance = 0
        vel_msg.angular.z = 0.5

if __name__ == '__main__':
    try:
        square()
    except rospy.ROSInterruptException:
        pass
